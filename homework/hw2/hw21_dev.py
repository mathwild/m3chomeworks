"""Homework 2, part 1
"""

"""Name and CID"""
Output = ["Mathilde Duverger","00978498"]
print "M3C 2016 Homework 2 by", Output[0]
print "CID:", Output[1]

import numpy as np
import matplotlib.pyplot as plt
from scipy import misc
    
def crop(F,T=0,B=0,L=0,R=0):
    """ Crop image represented by matrix F. T,B,L,R indicate 
    how much of the image should be removed from the top, bottom,
    left, and right of the original image.
    """
    """check our initial assertions to be able to run the code"""
    assert 0<=T<=1, "error, cropping parameters T should be between 0 and 1"
    assert 0<=B<=1, "error, cropping parameters B should be between 0 and 1"
    assert 0<=L<=1, "error, cropping parameters L should be between 0 and 1"
    assert 0<=R<=1, "error, cropping parameters R should be between 0 and 1"
    assert T+B<1, "error, cropping parameters T and B should add up to one maximum"
    assert L+R<1, "error, cropping parameters L and R should add up to one maximum"
    """get shape of our image"""
    S = np.shape(F)
    """"calculate the number of pixels to be removed"""
    FT = np.floor(T*S[0])
    FB = np.floor(B*S[0])
    FL = np.floor(L*S[1])
    FR = np.floor(R*S[1])
    """assign new matrix output as cropped version"""
    M = F[FT:S[0]-FB,FL:S[1]-FR,:]
    print np.shape(M)
    B(0<=M<=1)
    B==0
    """display the new cropped image M"""
    plt.figure()
    plt.imshow(M)

def smooth(F):
    """ Apply a simple smoothing procedure to image matrix
    """
    S = np.shape(F)
    M = np.zeros((S[0],S[1]))
    for i in range(1,S[0]-1):
        for j in range(1,S[1]-1):
            M[i,j] = sum(F[i-1:i+2,j-1:j+2])/9
    print M
        
def compress(F2d,C):
    """ Construct a compression of 2-d image matrix F2d which
    requires C times the memory needed for F2d
    """

def reconstruct(a1,a2,a3): #rename/add/remove input variables as needed
    """ Reconstruct an approximate 2-d image matrix from the "compressed" variables
    generated by compress
    """


if __name__ == '__main__':
    #Read and display image
    M = misc.imread("image.jpg")
    plt.figure()
    plt.imshow(M)
    plt.show()


# The code below can be used to test if
# the code is functioning in a "reasonable" manner.

#    T,B,L,R = 0.1,0.2,0.3,0.4
#    G = crop(F,T,B,L,R)
#    plt.figure()
#    plt.imshow(G)
    
#    G = smooth(F)
#    plt.figure()
#    plt.imshow(G)
    
#    a1,a2,a3 = compress(F.mean(2),0.1)
#    G = reconstruct(a1,a2,a3)
#    plt.figure()
#    plt.imshow(G,'gray')
